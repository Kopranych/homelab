# ==============================================================================
# Nextcloud Docker Compose Configuration
# ==============================================================================
# Generated by Ansible - DO NOT EDIT MANUALLY
#
# This configuration includes:
# - PostgreSQL 15 database (dedicated for Nextcloud)
# - Redis 7 cache (dedicated for Nextcloud)
# - Nextcloud 28 with Apache
# - Traefik reverse proxy for HTTPS
#
# Architecture: Dedicated database stack for Nextcloud
# Benefits: Isolated, production-like, easier backups, no conflicts
# ==============================================================================

services:
  # ============================================================================
  # PostgreSQL Database
  # ============================================================================
  postgres-nextcloud:
    image: {{ nextcloud.images.postgres }}
    container_name: postgres-nextcloud
    restart: unless-stopped
    volumes:
      - {{ nextcloud.data_root }}/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB={{ nextcloud.database.name }}
      - POSTGRES_USER={{ nextcloud.database.user }}
      - POSTGRES_PASSWORD={{ nextcloud.database.password }}
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{ nextcloud.database.user }}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nextcloud-network

  # ============================================================================
  # Redis Cache
  # ============================================================================
  redis-nextcloud:
    image: {{ nextcloud.images.redis }}
    container_name: redis-nextcloud
    restart: unless-stopped
    command: redis-server --requirepass {{ nextcloud.redis.password }}
    volumes:
      - {{ nextcloud.data_root }}/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - nextcloud-network

  # ============================================================================
  # Nextcloud Application
  # ============================================================================
  nextcloud-app:
    image: {{ nextcloud.images.nextcloud }}
    container_name: nextcloud-app
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      postgres-nextcloud:
        condition: service_healthy
      redis-nextcloud:
        condition: service_healthy
    volumes:
      # Only mount config and data directories (NOT /var/www/html)
      - {{ nextcloud.data_root }}/config:/var/www/html/config
      - {{ nextcloud.data_root }}/data:/var/www/html/data
    environment:
      # Database configuration
      - POSTGRES_DB={{ nextcloud.database.name }}
      - POSTGRES_USER={{ nextcloud.database.user }}
      - POSTGRES_PASSWORD={{ nextcloud.database.password }}
      - POSTGRES_HOST=postgres-nextcloud

      # Redis configuration
      - REDIS_HOST=redis-nextcloud
      - REDIS_HOST_PASSWORD={{ nextcloud.redis.password }}

      # Admin configuration
      - NEXTCLOUD_ADMIN_PASSWORD={{ nextcloud.admin.password }}
      - NEXTCLOUD_ADMIN_USER={{ nextcloud.admin.user }}

      # Trusted domains
      - NEXTCLOUD_TRUSTED_DOMAINS={{ nextcloud_trusted_domains | join(' ') }}

      # HTTPS configuration (for Traefik)
{% if nextcloud.https.enabled and tailscale_hostname is defined and tailscale_hostname != '' %}
      - OVERWRITEPROTOCOL=https
      - OVERWRITEHOST={{ tailscale_hostname }}
{% endif %}

    labels:
      # Enable Traefik
      - "traefik.enable=true"

      # HTTP Router
{% if nextcloud.https.enabled and tailscale_hostname is defined and tailscale_hostname != '' %}
      - "traefik.http.routers.nextcloud.rule=Host(`{{ tailscale_hostname }}`)"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.tls=true"
{% else %}
      - "traefik.http.routers.nextcloud.rule=Host(`{{ ansible_default_ipv4.address }}`) || Host(`localhost`)"
      - "traefik.http.routers.nextcloud.entrypoints=web"
{% endif %}

      # Service configuration
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"

      # Security headers
      - "traefik.http.middlewares.nextcloud-headers.headers.stsSeconds=15552000"

    networks:
      - nextcloud-network

  # ============================================================================
  # Traefik Reverse Proxy
  # ============================================================================
  traefik:
    image: {{ nextcloud.images.traefik }}
    container_name: nextcloud-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    command:
      # Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      # Entry points
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # File provider for certificates
      - "--providers.file.directory=/certs"
      - "--providers.file.watch=true"

      # Logging (optional - uncomment for debugging)
      # - "--log.level=DEBUG"
      # - "--accesslog=true"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

    networks:
      - nextcloud-network

    depends_on:
      - nextcloud-app

# ==============================================================================
# Networks
# ==============================================================================
networks:
  nextcloud-network:
    driver: bridge
